using System;
using System.Threading;
using Sys = Cosmos.System;
using System.Collections.Generic;

namespace Casili.FinalsOSProject
{
    public class Directory
    {
        public string Name { get; }
        public Directory Parent { get; }
        public Dictionary<string, Directory> SubDirectories { get; }
        public Dictionary<string, string> Files { get; }
        public string Path => Parent == null ? Name : $"{Parent.Path}/{Name}";

        public Directory(string name, Directory parent)
        {
            Name = name;
            Parent = parent;
            SubDirectories = new Dictionary<string, Directory>();
            Files = new Dictionary<string, string>();
        }
    }

    public class Kernel : Sys.Kernel
    {
        private Directory currentDirectory;
        private Directory rootDirectory;

        protected override void BeforeRun()
        {
            Console.Clear();
            ShowSplashScreen();
            Console.WriteLine(" Welcome to Kyle OS");
            Console.WriteLine("Type 'K' if you'd like a complete guide to our commands!");
            rootDirectory = new Directory("P", null);
            currentDirectory = rootDirectory;
        }

        protected override void Run()
        {
            Console.Write($"{currentDirectory.Path}> ");
            var input = Console.ReadLine();
            HandleCommand(input);
        }

        private void HandleCommand(string input)
        {
            var args = input.Split(' ', 2);
            var command = args[0].ToLower();

            switch (command)
            {
                case "K":
                    ShowHelp();
                    break;

                case "clr":
                    Console.Clear();
                    break;

                case "sht":
                    Countdown(5);
                    Sys.Power.Shutdown();
                    break;

                case "mkdir":
                    if (args.Length > 1) CreateDirectory(args[1]);
                    else Console.WriteLine("Usage: mkdir <directory_name>");
                    break;

                case "rmdir":
                    if (args.Length > 1) RemoveDirectory(args[1]);
                    else Console.WriteLine("Usage: rmdir <directory_name>");
                    break;

                case "cd":
                    if (args.Length > 1) ChangeDirectory(args[1]);
                    else Console.WriteLine("Usage: cd <directory_name>");
                    break;

                case "dc":
                    DisplayContents(currentDirectory, showAll: true);
                    break;

                case "tree":
                    DisplayTree(currentDirectory, "", true);
                    break;

                case "mktxt":
                    if (args.Length > 1) CreateTextFile(args[1]);
                    else Console.WriteLine("Usage: mktxt <file_name>");
                    break;

                case "edittxt":
                    if (args.Length > 1) EditTextFile(args[1]);
                    else Console.WriteLine("Usage: edittxt <file_name>");
                    break;

                case "rmtxt":
                    if (args.Length > 1) RemoveTextFile(args[1]);
                    else Console.WriteLine("Usage: rmtxt <file_name>");
                    break;

                case "vc":
                    if (args.Length > 1) ViewContents(args[1]);
                    else Console.WriteLine("Usage: view <file_name>");
                    break;

                case "nuke":
                    NukeCurrentDirectory();
                    break;

                default:
                    Console.WriteLine($"I don't recognize the command '{command}'. Type 'K' for a guide on what I can do.");
                    break;

            }
        }

        private static void ShowSplashScreen()
        {
            // Define multiple ASCII art frames for the animation
            List<string[]> frames = new List<string[]>
    {
        new string[]
        {
"/$$   /$$           /$$                  /$$$$$$                 ",
"| $$  /$$/          | $$                 /$$__  $$               ",
"| $$ /$$/  /$$   /$$| $$  /$$$$$$       | $$  \\ $$  /$$$$$$$     ",
"| $$$$$/  | $$  | $$| $$ /$$__  $$      | $$  | $$ /$$_____/     ",
"| $$  $$  | $$  | $$| $$| $$$$$$$$      | $$  | $$|  $$$$$$      ",
"| $$\\  $$ | $$  | $$| $$| $$_____/      | $$  | $$ \\____  $$      ",
"| $$ \\  $$|  $$$$$$$| $$|  $$$$$$$      |  $$$$$$/ /$$$$$$$/    ",  
"|__/  \\__/ \\____  $$|__/ \\_______/       \\______/ |_______/      ",
"           /$$  | $$                                             ",
"          |  $$$$$$/                                             ",
"           \\______/                                              ",
        },
            };    
    

            // Loop through each frame to display the animation
            foreach (var frame in frames)
            {
                Console.Clear();
                // Calculate vertical padding
                int verticalPadding = (Console.WindowHeight - frame.Length) / 2;

                // Print empty lines for vertical padding
                for (int i = 0; i < verticalPadding; i++)
                {
                    Console.WriteLine();
                }

                // Print the ASCII art with horizontal centering
                foreach (var line in frame)
                {
                    int horizontalPadding = (Console.WindowWidth - line.Length) / 2;
                    Console.WriteLine(new string(' ', Math.Max(horizontalPadding, 0)) + line);
                }
                Thread.Sleep(5000); // Adjust the speed of the animation here (500ms per frame)
            }

            Console.Clear(); // Clear screen after the animation
        }


        private void ShowHelp()
        {
            Console.WriteLine("Available Commands:\n");

            Console.WriteLine(" help                   - Display this list of commands");
            Console.WriteLine(" clear                  - Clear the screen and recent inputs");
            Console.WriteLine(" shutdown               - Shut down the system");
            Console.WriteLine(" mkdir <directory>      - Create a new directory");
            Console.WriteLine(" rmdir <directory>      - Remove an existing directory");
            Console.WriteLine(" touch <file>           - Create a new text file");
            Console.WriteLine(" edit <file>            - Edit an existing text file");
            Console.WriteLine(" view <file>            - View the contents of a text file");
            Console.WriteLine(" rm <file>              - Remove an existing text file");
            Console.WriteLine(" cd <directory>         - Change to a specific directory");
            Console.WriteLine(" cd ..                  - Move back to the previous directory");
            Console.WriteLine(" cd /                   - Return to the root directory");
            Console.WriteLine(" tree                   - Display the directory and file structure");
            Console.WriteLine(" ls                     - List contents of the current directory");
            Console.WriteLine(" nuke                   - Delete all directories and files (Use with caution!)");
            Console.WriteLine("\nType 'help' anytime to view this guide again.");
        } // <-- Add this closing brace




        private void CreateDirectory(string name)
        {
            if (currentDirectory.SubDirectories.ContainsKey(name))
            {
                Console.WriteLine("Directory already exists.");
            }
            else
            {
                var newDirectory = new Directory(name, currentDirectory);
                currentDirectory.SubDirectories[name] = newDirectory;
                Console.WriteLine($"Directory '{name}' created.");
            }
        }

        private void RemoveDirectory(string name)
        {
            if (currentDirectory.SubDirectories.ContainsKey(name))
            {
                currentDirectory.SubDirectories.Remove(name);
                Console.WriteLine($"Directory '{name}' removed.");
            }
            else
            {
                Console.WriteLine("Directory not found.");
            }
        }

        private void ChangeDirectory(string name)
        {
            if (name == "..")
            {
                if (currentDirectory.Parent != null)
                {
                    currentDirectory = currentDirectory.Parent;
                }
            }
            else if (name == "/")
            {
                currentDirectory = rootDirectory;
            }
            else if (currentDirectory.SubDirectories.ContainsKey(name))
            {
                currentDirectory = currentDirectory.SubDirectories[name];
            }
            else
            {
                Console.WriteLine("Directory not found.");
            }
        }

        private void DisplayContents(Directory dir, bool showAll = false)
        {
            if (dir.SubDirectories.Count == 0 && dir.Files.Count == 0)
            {
                Console.WriteLine("Nothing found");
                return;
            }

            if (dir.Parent == null)
            {
                Console.WriteLine($"{dir.Name}");
            }

            foreach (var subdir in dir.SubDirectories.Values)
            {
                Console.WriteLine($"[Folder] {subdir.Name}");
            }

            foreach (var file in dir.Files.Keys)
            {
                Console.WriteLine($"[Text] {file}");
            }
        }

        private void DisplayTree(Directory dir, string indent, bool isLast)
        {
            if (dir.Parent == null)
            {
                Console.WriteLine($"{dir.Name}");
            }
            else
            {
                Console.WriteLine($"{indent}{(isLast ? "+--" : "|--")}[Folder] {dir.Name}");
            }

            indent += isLast ? "   " : "|  ";

            var subDirs = new List<Directory>(dir.SubDirectories.Values);
            for (int i = 0; i < subDirs.Count; i++)
            {
                DisplayTree(subDirs[i], indent, i == subDirs.Count - 1);
            }

            var files = new List<string>(dir.Files.Keys);
            for (int i = 0; i < files.Count; i++)
            {
                Console.WriteLine($"{indent}{(i == files.Count - 1 ? "+--" : "|--")}[Text] {files[i]}");
            }
        }

        private void CreateTextFile(string name)
        {
            if (currentDirectory.Files.ContainsKey(name))
            {
                Console.WriteLine("File already exists.");
            }
            else
            {
                currentDirectory.Files[name] = string.Empty;
                Console.WriteLine($"File '{name}' created.");
            }
        }

        private void EditTextFile(string name)
        {
            if (currentDirectory.Files.ContainsKey(name))
            {
                Console.WriteLine($"Current content of {name}:");
                Console.WriteLine(currentDirectory.Files[name]);
                Console.WriteLine("Enter new content (end with an empty line):");
                var contentBuilder = new System.Text.StringBuilder();
                string line;
                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    contentBuilder.AppendLine(line);
                }
                currentDirectory.Files[name] = contentBuilder.ToString().TrimEnd();
                Console.WriteLine($"File '{name}' updated.");
            }
            else
            {
                Console.WriteLine("File not found.");
            }
        }

        private void RemoveTextFile(string name)
        {
            if (currentDirectory.Files.ContainsKey(name))
            {
                currentDirectory.Files.Remove(name);
                Console.WriteLine($"File '{name}' deleted.");
            }
            else
            {
                Console.WriteLine("File not found.");
            }
        }

        private void ViewContents(string name)
        {
            if (currentDirectory.Files.ContainsKey(name))
            {
                Console.WriteLine($"Content of {name}:");
                Console.WriteLine(currentDirectory.Files[name]);
            }
            else
            {
                Console.WriteLine("File not found.");
            }
        }

        private void NukeCurrentDirectory()
        {
            currentDirectory = rootDirectory;

            if (currentDirectory.SubDirectories.Count > 0)
            {
                currentDirectory.SubDirectories.Clear();
            }

            if (currentDirectory.Files.Count > 0)
            {
                currentDirectory.Files.Clear();
            }

            Console.WriteLine("HOTDOG");
        }

        private static void Countdown(int seconds)
        {
            for (int i = seconds; i > 0; i--)
            {
                Console.Write($"Shutting down in {i} seconds... \r");
                System.Threading.Thread.Sleep(1000);
            }
        }
    }
}



